import java.util.LinkedList;
import java.util.Queue;

class Solution {
    int[] moveX = {1, 0, -1, 0};
    int[] moveY = {0, 1, 0, -1};

    public int solution(int[][] maps) {

        int[][] visited = new int[maps.length][maps[0].length];
        bfs(maps, visited);
        if (visited[maps.length - 1][maps[0].length - 1] == 0) {
            return -1;
        }
        return visited[maps.length - 1][maps[0].length - 1];
    }

    private void bfs(int[][] maps, int[][] visited) {
        int x = 0;
        int y = 0;
        visited[x][y] = 1;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{x, y});
        while (queue.size() != 0) {
            int[] current = queue.remove();
            int currentX = current[0];
            int currentY = current[1];

            for (int i = 0; i < 4; i++) {
                int nextX = currentX + moveX[i];
                int nextY = currentY + moveY[i];

                if (nextX == -1 || nextX == maps.length || nextY == -1 || nextY == maps[0].length) {
                    continue;
                }
                if (maps[nextX][nextY] == 1 && visited[nextX][nextY] == 0) {
                    visited[nextX][nextY] = visited[currentX][currentY] + 1;
                    queue.add(new int[]{nextX, nextY});
                }
            }

        }
    }
}
